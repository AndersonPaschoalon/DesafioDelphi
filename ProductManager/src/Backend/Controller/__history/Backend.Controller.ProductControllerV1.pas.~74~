unit Backend.Controller.ProductControllerV1;

interface

uses
  MVCFramework,
  MVCFramework.Commons,
  MVCFramework.Serializer.Commons,
  MVCFramework.Serializer.JsonDataObjects,
  System.Generics.Collections,
  Backend.Services.ProductServices,
  Backend.Services.ProductServicesMock,
  Backend.Services.IProductServices,
  Backend.Data.vo.v1.ProductVO;


type


  [MVCPath('/api')]
  TProductManagerController = class(TMVCController)

  private
    FProductServices: IProductServices;

  protected
    procedure OnBeforeAction(Context: TWebContext; const AActionName: string; var Handled: Boolean); override;
    procedure OnAfterAction(Context: TWebContext; const AActionName: string); override;

  public
    constructor Create; override;
    destructor Destroy; override;


    {Test endpoint: just print Hello DelphiMVCFramework World}
    [MVCPath]
    [MVCHTTPMethod([httpGET])]
    procedure Index;

    {This endpoints confirms the service is indeed active}
    [MVCPath('/isactive')]
    [MVCHTTPMethod([httpGET])]
    [MVCProduces(TMVCMediaType.TEXT_PLAIN)]
    procedure GetIsActive();

    [MVCPath('/products')]
    [MVCHTTPMethod([httpGET])]
    function GetAllProducts: TObjectList<TProductVO>;

    [MVCPath('/product/($ID)')]
    [MVCHTTPMethod([httpGET])]
    function GetProduct(ID: Integer): TProductVO;

    {
    [MVCPath('/create')]
    [MVCHTTPMethod([httpPOST])]
    function CreateProduct([MVCFromBody] AProductVo: TProductVO): IMVCResponse;
     }

    [MVCPath('/create')]
    [MVCHTTPMethod([httpPOST])]
    procedure CreateProduct;


    [MVCPath('/update/')]
    [MVCHTTPMethod([httpPUT])]
    function UpdateProduct([MVCFromBody] AProductVo: TProductVO): IMVCResponse;

    [MVCPath('/delete/($ID)')]
    [MVCHTTPMethod([httpDELETE])]
    function DeleteProduct(ID: Integer): IMVCResponse;

  end;

implementation

uses
  FireDAC.Comp.Client,
  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Error,
  FireDAC.UI.Intf,
  FireDAC.Phys.Intf,
  FireDAC.Stan.Def,
  FireDAC.Stan.Pool,
  FireDAC.Stan.Async,
  FireDAC.Phys,
  FireDAC.Phys.PG,
  FireDAC.Phys.PGDef,
  FireDAC.VCLUI.Wait,
  FireDAC.Stan.Param,
  FireDAC.DatS,
  FireDAC.DApt.Intf,
  FireDAC.DApt,
  System.SysUtils,
  MVCFramework.Logger;

constructor TProductManagerController.Create;
begin
  inherited;

  //FProductServices := TProductServicesMock.Create();
  FProductServices := TProductServices.Create;
end;

destructor TProductManagerController.Destroy;
begin
  // Free ProductServices when the controller is destroyed
  inherited;
end;

procedure TProductManagerController.Index;
begin
  //use Context property to access to the HTTP request and response 
  Render('Hello DelphiMVCFramework World');
end;

procedure TProductManagerController.GetIsActive();
begin
  Render('True');
end;

procedure TProductManagerController.OnAfterAction(Context: TWebContext; const AActionName: string); 
begin
  { Executed after each action }
  inherited;
end;

procedure TProductManagerController.OnBeforeAction(Context: TWebContext; const AActionName: string; var Handled: Boolean);
begin
  { Executed before each action
    if handled is true (or an exception is raised) the actual
    action will not be called }
  inherited;
end;

function TProductManagerController.GetAllProducts(): TObjectList<TProductVO>;
begin
  Result := FProductServices.GetAll();
end;

function TProductManagerController.GetProduct(ID: Integer): TProductVO;
begin
  Result := FProductServices.GetById(ID);
end;

{
function TProductManagerController.CreateProduct([MVCFromBody] AProductVo: TProductVO): IMVCResponse;
begin
  if FProductServices.CreateProduct(AProductVo) then
    Result := MVCResponseBuilder
      .StatusCode(HTTP_STATUS.Created)
      .Body(AProductVo)
      .Build
  else
    Result := MVCResponseBuilder
      .StatusCode(HTTP_STATUS.BadRequest)
      .Body('Failed to create product')
      .Build;
end;
 }

procedure TProductManagerController.CreateProduct;
var
  lProduct: TProductVO;
begin
  lProduct := Context.Request.BodyAs<TProductVO>;

  try
    if FProductServices.CreateProduct(lProduct) then
      begin
        Render(HTTP_STATUS.OK, 'Customer Created')
      end
    else
      begin
        Render(HTTP_STATUS.InternalServerError, 'Internal Server Error');
      end;

  finally

  end;

end;

function TProductManagerController.UpdateProduct([MVCFromBody] AProductVo: TProductVO): IMVCResponse;
begin
  if FProductServices.UpdateProduct(AProductVo) then
    Result := MVCResponseBuilder
      .StatusCode(HTTP_STATUS.NoContent)
      .Build
  else
    Result := MVCResponseBuilder
      .StatusCode(HTTP_STATUS.NotFound)
      .Body('Product not found')
      .Build;
end;

function TProductManagerController.DeleteProduct(ID: Integer): IMVCResponse;
begin
  if FProductServices.DeleteProduct(ID) then  // Use FProductServices instance
    Result := MVCResponseBuilder
      .StatusCode(HTTP_STATUS.NoContent)
      .Build
  else
    Result := MVCResponseBuilder
      .StatusCode(HTTP_STATUS.NotFound)
      .Body('Product not found')
      .Build;
end;


end.

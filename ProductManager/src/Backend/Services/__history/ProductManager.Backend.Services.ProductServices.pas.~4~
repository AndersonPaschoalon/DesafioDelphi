unit ProductManager.Backend.Services.ProductServices;

interface

uses
  System.Generics.Collections,
  Backend.Data.vo.v1.ProductVO;


type
  TProductServices = class
    public
    class function GetById(pId: Integer): TProductVO;
    class function GetAll(): TObjectList<TProductVO>;
    class function CreateProduct(const AProduct: TProductVO): Boolean;
    class function UpdateProduct(pId: Integer; const AProduct: TProductVO): Boolean;
    class function DeleteProduct(pId: Integer): Boolean;

  end;


implementation

{ TProductServices }

class function TProductServices.GetById(pId: Integer): TProductVO;
begin
  // todo
end;

class function TProductServices.GetAll(): TObjectList<TProductVO>;
var
  lProductVo: TObjectList<TProductVO>;
begin
  lProductVo := TObjectList<TProductVO>.Create(True);
  try
    lProductVo.Add(TProductVO.Create(1, 'Abacate', 1.0, 'Fruta', 'Fazenda Ametista'));
    lProductVo.Add(TProductVO.Create(2, 'Banana', 1.0, 'Fruta', 'Fazenda Barranco'));
    lProductVo.Add(TProductVO.Create(3, 'Carambola', 1.0, 'Fruta', 'Fazenda Cavalo'));
    lProductVo.Add(TProductVO.Create(4, 'Damasco', 1.0, 'Fruta', 'Fazenda Da Avó'));
    lProductVo.Add(TProductVO.Create(5, 'Espinafre', 1.0, 'Verdura', 'Fazenda Esmeralda'));
    Result := lProductVo;
  except
    lProductVo.Free;
    raise;
  end;
end;

class function TProductServices.CreateProduct(const AProduct: TProductVO): Boolean;
var 
  lResult : Boolean
begin
  Result := True;
end;

class function TProductServices.UpdateProduct(pId: Integer; const AProduct: TProductVO): Boolean;
begin
  // todo
end;

class function TProductServices.DeleteProduct(pId: Integer): Boolean;
begin
  // todo
end;

end.
